import random
import csv
import numpy as np
import tensorflow.compat.v1 as tf
tf.disable_eager_execution()

def learning_ai_model_first():
    # subject_name, start_time, end_time
    # subject_name : 사용자가 공부한 과목(string 0~9)
    # start_time : 사용자가 그 과목 공부를 시작한 시간(string)
    # end_time : 사용자가 그 과목 공부를 끝낸 시간(string)
    # 파싱함수 시작=============================================================================================

    # *****x_data, y_data, w1, w2, w3, b1, b2, b3는 임의로 넣어둔 값, 파싱한 값을 대입하는 코드로 대체 필요*****

    # 사용자가 공부한 과목을 파싱(string -> one-hot vector)

    # ----------------------------------------------------

    x_data = [
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],  # 수학
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],  # 수학
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],  # 수학
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],  # 수학
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],  # 수학
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],  # 수학
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],  # 과학
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],  # 과학
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],  # 영어
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],  # 영어
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],  # 영어
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 국어
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 국어
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 국어
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 국어
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]   # 국어
    ]

    # 사용자가 공부를 시작한 시간과 끝낸 시간을 이용하여 파싱(string start_time, string end_time -> one-hot vector)

    # ----------------------------------------------------------------------------------------------------------

    y_data = [
        # 8시
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        # 8시15분
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        # 8시30분
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        # 8시
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        # 7시30분
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        # 8시
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        # 8시
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        # 8시15분
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        # 8시30분
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        # 8시45분
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        # 8시30분
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        # 8시
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        # 7시45분
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        # 7시30분
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        # 7시45분
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        # 7시
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]
    # w1은 임의로 지정, 추후에 csv파일에서 읽어온 후 수정하는 코드로 추후 변경

    # --------csv 파일에서 가중치 및 편향 읽어옴

    # -----------------------------------------

    # --------읽어온 데이터를 파싱

    # -----------------------------------------

    w1 = [
        [0.22963543, 0.10139681, 0.0775547, 0.24722044, 0.11483027, 0.00551179, 0.14432828, - 0.03568344, 0.29229844,
         0.26167706, 0.19943972, - 0.00243935, 0.21657214, 0.28064257, 0.00747892, 0.17068793, 0.02162899, 0.07624195,
         0.27923638, 0.25679967, 0.2119741, 0.18822353, 0.3464482, 0.12351017, 0.19635396, 0.31572086, 0.36009675,
         0.06668088, 0.16935205, 0.14577508, 0.0377159, 0.22753291, 0.20062937, 0.29254758, 0.13431375, 0.14880781,
         0.16126864, 0.20922431, 0.18847293, 0.18987067],
        [- 0.00243935, 0.21657214, 0.28064257, 0.00747892, 0.17068793, 0.02162899, 0.07624195,
         0.27923638, 0.25679967, 0.2119741, 0.18822353, 0.3464482, 0.12351017, 0.19635396, 0.31572086, 0.36009675,
         0.06668088, 0.16935205, 0.14577508, 0.0377159, 0.22753291, 0.20062937, 0.29254758, 0.13431375, 0.14880781,
         0.16126864, 0.20922431, 0.18847293, 0.18987067, 0.22963543, 0.10139681, 0.0775547, 0.24722044, 0.11483027,
         0.00551179, 0.14432828, - 0.03568344, 0.29229844, 0.26167706, 0.19943972],
        [- 0.00243935, 0.21657214, 0.22963543, 0.10139681, 0.0775547, 0.24722044, 0.11483027,
         0.00551179, 0.14432828, - 0.03568344, 0.29229844, 0.26167706, 0.19943972, 0.28064257, 0.00747892, 0.17068793,
         0.02162899, 0.07624195, 0.27923638, 0.25679967, 0.2119741, 0.18822353, 0.3464482, 0.12351017, 0.19635396,
         0.31572086, 0.36009675, 0.06668088, 0.16935205, 0.14577508, 0.0377159, 0.22753291, 0.20062937, 0.29254758,
         0.13431375, 0.14880781, 0.16126864, 0.20922431, 0.18847293, 0.18987067],
        [0.14432828, - 0.03568344, 0.29229844, 0.26167706, 0.19943972, 0.28064257, 0.00747892, 0.17068793, 0.02162899,
         0.07624195, 0.27923638, 0.25679967, 0.2119741, 0.18822353, 0.3464482, 0.12351017, 0.19635396, 0.31572086,
         0.36009675, 0.06668088, 0.16935205, 0.14577508, 0.0377159, 0.22753291, 0.20062937, 0.29254758, 0.13431375,
         0.14880781, 0.16126864, 0.20922431, 0.18847293, 0.18987067, - 0.00243935, 0.21657214, 0.22963543, 0.10139681,
         0.0775547, 0.24722044, 0.11483027, 0.00551179],
        [0.22963543, 0.10139681, 0.0775547, 0.24722044, 0.11483027, 0.00551179, 0.14432828, - 0.03568344, 0.29229844,
         0.26167706, 0.19943972, - 0.00243935, 0.21657214, 0.28064257, 0.00747892, 0.17068793, 0.02162899, 0.07624195,
         0.27923638, 0.25679967, 0.2119741, 0.18822353, 0.3464482, 0.12351017, 0.19635396, 0.31572086, 0.36009675,
         0.06668088, 0.16935205, 0.14577508, 0.0377159, 0.22753291, 0.20062937, 0.29254758, 0.13431375, 0.14880781,
         0.16126864, 0.20922431, 0.18847293, 0.18987067],
        [- 0.00243935, 0.21657214, 0.28064257, 0.00747892, 0.17068793, 0.02162899, 0.07624195,
         0.27923638, 0.25679967, 0.2119741, 0.18822353, 0.3464482, 0.12351017, 0.19635396, 0.31572086, 0.36009675,
         0.06668088, 0.16935205, 0.14577508, 0.0377159, 0.22753291, 0.20062937, 0.29254758, 0.13431375, 0.14880781,
         0.16126864, 0.20922431, 0.18847293, 0.18987067, 0.22963543, 0.10139681, 0.0775547, 0.24722044, 0.11483027,
         0.00551179, 0.14432828, - 0.03568344, 0.29229844, 0.26167706, 0.19943972],
        [- 0.00243935, 0.21657214, 0.22963543, 0.10139681, 0.0775547, 0.24722044, 0.11483027,
         0.00551179, 0.14432828, - 0.03568344, 0.29229844, 0.26167706, 0.19943972, 0.28064257, 0.00747892, 0.17068793,
         0.02162899, 0.07624195, 0.27923638, 0.25679967, 0.2119741, 0.18822353, 0.3464482, 0.12351017, 0.19635396,
         0.31572086, 0.36009675, 0.06668088, 0.16935205, 0.14577508, 0.0377159, 0.22753291, 0.20062937, 0.29254758,
         0.13431375, 0.14880781, 0.16126864, 0.20922431, 0.18847293, 0.18987067],
        [0.14432828, - 0.03568344, 0.29229844, 0.26167706, 0.19943972, 0.28064257, 0.00747892, 0.17068793,
         0.02162899, 0.07624195, 0.27923638, 0.25679967, 0.2119741, 0.18822353, 0.3464482, 0.12351017, 0.19635396,
         0.31572086, 0.36009675, 0.06668088, 0.16935205, 0.14577508, 0.0377159, 0.22753291, 0.20062937, 0.29254758,
         0.13431375, 0.14880781, 0.16126864, 0.20922431, 0.18847293, 0.18987067, - 0.00243935, 0.21657214, 0.22963543,
         0.10139681, 0.0775547, 0.24722044, 0.11483027, 0.00551179],
        [- 0.00243935, 0.21657214, 0.22963543, 0.10139681, 0.0775547, 0.24722044, 0.11483027,
         0.00551179, 0.14432828, - 0.03568344, 0.29229844, 0.26167706, 0.19943972, 0.28064257, 0.00747892, 0.17068793,
         0.02162899, 0.07624195, 0.27923638, 0.25679967, 0.2119741, 0.18822353, 0.3464482, 0.12351017, 0.19635396,
         0.31572086, 0.36009675, 0.06668088, 0.16935205, 0.14577508, 0.0377159, 0.22753291, 0.20062937, 0.29254758,
         0.13431375, 0.14880781, 0.16126864, 0.20922431, 0.18847293, 0.18987067],
        [0.14432828, - 0.03568344, 0.29229844, 0.26167706, 0.19943972, 0.28064257, 0.00747892, 0.17068793,
         0.02162899, 0.07624195, 0.27923638, 0.25679967, 0.2119741, 0.18822353, 0.3464482, 0.12351017, 0.19635396,
         0.31572086, 0.36009675, 0.06668088, 0.16935205, 0.14577508, 0.0377159, 0.22753291, 0.20062937, 0.29254758,
         0.13431375, 0.14880781, 0.16126864, 0.20922431, 0.18847293, 0.18987067, - 0.00243935, 0.21657214, 0.22963543,
         0.10139681, 0.0775547, 0.24722044, 0.11483027, 0.00551179]
    ]

    # csv 파일에서 읽어오는 코드로 수정해야 함. w2 = float[40][80]
    w2 = np.ones((40, 80), dtype='f4')

    # csv 파일에서 읽어오는 코드로 수정해야 함. w3 = float[80][96]
    w3 = np.ones((80, 96), dtype='f4')

    # csv 파일에서 읽어오는 코드로 수정해야 함. b1 = float[40]
    rare_b1 = np.zeros(40, dtype='f4')

    # csv 파일에서 읽어오는 코드로 수정해야 함. b2 = float[80]
    rare_b2 = np.zeros(80, dtype='f4')

    # csv 파일에서 읽어오는 코드로 수정해야 함. b3 = float[96]
    rare_b3 = np.zeros(96, dtype='f4')

    # 파싱함수 끝==============================================================================================

    X = tf.placeholder(tf.float32, shape=[None, 10])
    Y = tf.placeholder(tf.float32, shape=[None, 96])

    W1 = tf.Variable(w1)
    b1 = tf.Variable(rare_b1)

    W2 = tf.Variable(w2)
    b2 = tf.Variable(rare_b2)

    W3 = tf.Variable(w3)
    b3 = tf.Variable(rare_b3)

    L1 = tf.nn.relu(tf.add(tf.matmul(X, W1), b1))
    L2 = tf.nn.relu(tf.add(tf.matmul(L1, W2), b2))
    model = tf.add(tf.matmul(L2, W3), b3)

    cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_data, logits=model))

    optimizer = tf.train.AdamOptimizer(learning_rate=0.05)
    train_op = optimizer.minimize(cost)

    init = tf.global_variables_initializer()
    sess = tf.Session()
    sess.run(init)

    for step in range(100):
        sess.run(train_op, feed_dict={X: x_data, Y: y_data})

    w1 = sess.run(W1)
    w2 = sess.run(W2)
    w3 = sess.run(W3)
    rare_b1 = sess.run(b1)
    rare_b2 = sess.run(b2)
    rare_b3 = sess.run(b3)

    # ======= csv 파일에 저장하는 코드 작성

    # -----------------------------------

def learning_ai_model_second():
    # subject_name, start_time, end_time, satisfaction
    # subject_name : 사용자가 공부한 과목(string 0~9)
    # start_time : 사용자가 그 과목 공부를 시작한 시간(string)
    # end_time : 사용자가 그 과목 공부를 끝낸 시간(string)
    # satisfaction : 만족도

    # 파싱함수 시작=============================================================================================

    # *****x_data, y_data, w1, w2, w3, b1, b2, b3는 임의로 넣어둔 값, 파싱한 값을 대입하는 코드로 대체 필요*****

    # 사용자가 공부한 과목과 시간을 파싱(string subject_name, string start_time -> one-hot vector)

    # ------------------------------------------------------------------------------------------

    x_data = [
        # 과목의 이름과 그 과목을 공부한시간
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # a
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # b
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # c
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # d
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # e
        [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # f
        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # g
        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # h
        [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # i
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # j
    ]

    # 사용자의 만족도를 파싱(string -> one-hot vector)-------------------------------------------

    # ------------------------------------------------------------------------------------------

    # 특정 과목을 특정 시간에 했을 때의 만족도, 15분 단위로 분할
    y_data = [
        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],  # a
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],  # b
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],  # c
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],  # d
        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],  # e
        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],  # f
        [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],  # g
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],  # h
        [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],  # i
        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],  # j
    ]

    test_input = [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

    test_label = [[0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]

    # w1은 임의로 지정, 추후에 csv 파일에서 읽어온 후 수정하는 코드로 추후 변경

    # -------- csv 파일에서 가중치 및 편향 읽어옴

    # -----------------------------------------

    # --------읽어온 데이터를 파싱

    # -----------------------------------------

    # csv 파일에서 읽어오는 코드로 수정해야 함. w1 = float[106][80]
    w1 = tf.Variable(tf.random_normal([106, 80], 0.2, 0.1))

    # csv 파일에서 읽어오는 코드로 수정해야 함. w2 = float[80][20]
    w2 = tf.Variable(tf.random_normal([80, 20], 0.2, 0.1))

    # csv 파일에서 읽어오는 코드로 수정해야 함. w3 = float[20][10]
    w3 = tf.Variable(tf.random_normal([20, 10], 0.2, 0.1))

    # csv 파일에서 읽어오는 코드로 수정해야 함. b1 = float[80]
    rare_b1 = tf.Variable(tf.zeros([80]))

    # csv 파일에서 읽어오는 코드로 수정해야 함. b2 = float[20]
    rare_b2 = tf.Variable(tf.zeros([20]))

    # csv 파일에서 읽어오는 코드로 수정해야 함. b3 = float[10]
    rare_b3 = tf.Variable(tf.zeros([10]))

    # 파싱함수 끝==============================================================================================

    X = tf.placeholder(tf.float32, shape=[None, 106])
    Y = tf.placeholder(tf.float32, shape=[None, 10])

    W1 = tf.Variable(tf.random_normal([106, 80], 0.2, 0.1))
    b1 = tf.Variable(tf.zeros([80]))

    W2 = tf.Variable(tf.random_normal([80, 20], 0.2, 0.1))
    b2 = tf.Variable(tf.zeros([20]))

    W3 = tf.Variable(tf.random_normal([20, 10], 0.2, 0.1))
    b3 = tf.Variable(tf.zeros([10]))

    L1 = tf.nn.relu(tf.add(tf.matmul(X, W1), b1))
    L2 = tf.nn.relu(tf.add(tf.matmul(L1, W2), b2))
    model = tf.add(tf.matmul(L2, W3), b3)

    cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_data, logits=model))

    optimizer = tf.train.AdamOptimizer(learning_rate=0.05)
    train_op = optimizer.minimize(cost)

    init = tf.global_variables_initializer()
    sess = tf.Session()
    sess.run(init)

    for step in range(100):
        sess.run(train_op, feed_dict={X: x_data, Y: y_data})

    w1 = sess.run(W1)
    w2 = sess.run(W2)
    w3 = sess.run(W3)
    rare_b1 = sess.run(b1)
    rare_b2 = sess.run(b2)
    rare_b3 = sess.run(b3)

    # ======= csv 파일에 저장하는 코드 작성

    # -----------------------------------

def using_ai():
    # subject_name, number_of_same_sub
    number_of_same_sub = 1
    # subject_name : 사용자가 공부할 과목(string 0~9), 1개씩 입력됨
    #number_of_same_sub : 사용자가 동일 과목을 공부할 횟수
    # 파싱함수 시작=============================================================================================

    # *****x_data, y_data, w1, w2, w3, b1, b2, b3는 임의로 넣어둔 값, 파싱한 값을 대입하는 코드로 대체 필요*****

    # 사용자가 공부한 과목 이름을 파싱(string -> one-hot vector)

    # ----------------------------------------------------

    # ----------------------------------------------------

    x_data = [
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],  # 수학
    ]

    # ============================================================================================첫번째 인공지능을 통과
    # W를 csv 파일에서 읽어온 후 수정하는 코드로 추후 변경

    # --------csv 파일에서 가중치 및 편향 읽어옴

    # -----------------------------------------

    # --------읽어온 데이터를 파싱

    # -----------------------------------------

    # csv 파일에서 읽어오는 코드로 수정해야 함. w1 = float[10][40]
    w1 = np.ones((10, 40), dtype='f4')

    # csv 파일에서 읽어오는 코드로 수정해야 함. w2 = float[40][80]
    w2 = np.ones((40, 80), dtype='f4')

    # csv 파일에서 읽어오는 코드로 수정해야 함. w3 = float[80][96]
    w3 = np.ones((80, 96), dtype='f4')

    # csv 파일에서 읽어오는 코드로 수정해야 함. b1 = float[40]
    rare_b1 = np.zeros(40, dtype='f4')

    # csv 파일에서 읽어오는 코드로 수정해야 함. b2 = float[80]
    rare_b2 = np.zeros(80, dtype='f4')

    # csv 파일에서 읽어오는 코드로 수정해야 함. b3 = float[96]
    rare_b3 = np.zeros(96, dtype='f4')

    # 파싱함수 끝==============================================================================================

    # ==================첫번째 인공지능 모델 재구성===============================

    X1 = tf.placeholder(tf.float32, shape=[None, 10])

    W1 = tf.Variable(w1)
    W2 = tf.Variable(w2)
    W3 = tf.Variable(w3)

    b1 = tf.Variable(rare_b1)
    b2 = tf.Variable(rare_b2)
    b3 = tf.Variable(rare_b3)

    L1 = tf.nn.relu(tf.add(tf.matmul(X1, W1), b1))
    L2 = tf.nn.relu(tf.add(tf.matmul(L1, W2), b2))
    model = tf.nn.relu(tf.add(tf.matmul(L2, W3), b3))

    init = tf.global_variables_initializer()
    sess = tf.Session()
    sess.run(init)

    # 시간대 4개를 선택해 리스트로 저장, 첫번째 인공지능: number_of_same_sub 공부 단위 * 4
    top_time = choose_top_time(sess.run(model, feed_dict={X1: x_data}), number_of_same_sub*4)

    # 두번째 인공지능 입력값 생성
    top_time_invec = np.zeros(96)

    for i in range(len(top_time)):
        top_time_invec[top_time[i]] = 1

    #2차원 리스트로 다시 변환
    second_ai_input = (np.concatenate((x_data, top_time_invec), axis=None)).tolist()
    second_ai_input = [second_ai_input]

    # ============================================================================================두번째 인공지능을 통과

    # W를 csv 파일에서 읽어온 후 수정하는 코드로 추후 변경

    # --------csv 파일에서 가중치 및 편향 읽어옴

    # -----------------------------------------

    # --------읽어온 데이터를 파싱

    # -----------------------------------------

    # csv 파일에서 읽어오는 코드로 수정해야 함. w4 = float[106][80]
    w4 = np.ones((106, 80), dtype='f4')

    # csv 파일에서 읽어오는 코드로 수정해야 함. w5 = float[80][20]
    w5 = np.ones((80, 20), dtype='f4')

    # csv 파일에서 읽어오는 코드로 수정해야 함. w6 = float[20][10]
    w6 = np.ones((20, 10), dtype='f4')

    # csv 파일에서 읽어오는 코드로 수정해야 함. b4 = float[80]
    rare_b4 = np.zeros(80, dtype='f4')

    # csv 파일에서 읽어오는 코드로 수정해야 함. b5 = float[20]
    rare_b5 = np.zeros(20, dtype='f4')

    # csv 파일에서 읽어오는 코드로 수정해야 함. b6 = float[10]
    rare_b6 = np.zeros(10, dtype='f4')

    # 파싱함수 끝==============================================================================================

    # ==================두번째 인공지능 모델 재구성===============================

    X2 = tf.placeholder(tf.float32, shape=[None, 106])

    W4 = tf.Variable(w4)
    W5 = tf.Variable(w5)
    W6 = tf.Variable(w6)

    b4 = tf.Variable(rare_b4)
    b5 = tf.Variable(rare_b5)
    b6 = tf.Variable(rare_b6)

    L4 = tf.nn.relu(tf.add(tf.matmul(X2, W4), b4))
    L5 = tf.nn.relu(tf.add(tf.matmul(L4, W5), b5))
    model2 = tf.nn.relu(tf.add(tf.matmul(L5, W6), b6))

    init = tf.global_variables_initializer()
    sess = tf.Session()
    sess.run(init)

    # 시간대 2개를 선택해 리스트로 저장, 두번째 인공지능: number_of_same_sub 공부 단위 * 2
    top_time_in_index = choose_top_time(sess.run(model2, feed_dict={X2: second_ai_input}), number_of_same_sub * 2)

    total_output = []

    for i in range(number_of_same_sub*2):
        total_output.append(top_time[top_time_in_index[i]])
        total_output[i] = (total_output[i]//4)*100 + (total_output[i]%4)*15

    print(total_output)

def choose_top_time(soft_arr, num_of_same_choose):
    rank_one_soft_list = soft_arr[0]
    rank_one_soft_list = rank_one_soft_list.tolist()
    top4_time_index = []

    for i in range(num_of_same_choose):
        top4_time_index.append(rank_one_soft_list.index(max(rank_one_soft_list)))
        rank_one_soft_list[rank_one_soft_list.index(max(rank_one_soft_list))] = min(rank_one_soft_list)-1

    return top4_time_index

if __name__ == '__main__':
    learning_ai_model_first()
    learning_ai_model_second()
    using_ai()

